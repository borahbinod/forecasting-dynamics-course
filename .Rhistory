rain_forecast = forecast(rain_model, newdata = data.frame(monsoon_rain = c(120, 226, 176, 244)))
plot(rain_forecast)
setwd("C:/Users/adler/Box Sync/proposals/CheatgrassMacro/MacrosysSubmission2017/climate")
siteD <- data.frame("site"="SGS", "latitude"=40.82, "longitude"=-104.77)
library(devtools) #needed to download prism from github
library(reshape2) ##melting dataframes
library(dplyr) #data wrangling
library(raster) ##working with raster data
library(sp) ##manipulationg spatial data
library(prism) ##prism data access
options(prism.path = paste0(getwd(),"/prism"))
get_prism_normals(type = 'tmin', resolution = '4km',annual=T, keepZip = TRUE)
get_prism_normals(type = 'tmax', resolution = '4km',annual=T, keepZip = TRUE)
get_prism_normals(type = 'ppt', resolution = '4km',mon=1:12, keepZip = TRUE)
RS <- prism_stack(ls_prism_data()) ##raster file of data
proj4string(RS)<-CRS("+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ##assign projection
siteD_spdf<-SpatialPointsDataFrame(coords=siteD[,c('longitude','latitude')],
data=lavD, proj4string = CRS("+proj=longlat +ellps=WGS84 +no_defs"))
siteD_spdf<-SpatialPointsDataFrame(coords=siteD[,c('longitude','latitude')],
data=siteD, proj4string = CRS("+proj=longlat +ellps=WGS84 +no_defs"))
test<-extract(RS, siteD_spdf,  fun=mean, na.rm=TRUE, sp=TRUE)
head(test)
dim(test)
get_prism_monthlys(type = 'tmin', resolution = '4km',annual=T, keepZip = F)
get_prism_monthlys(type = 'tmin', resolution = '4km',mon=1:12, keepZip = F)
get_prism_monthlys(type = 'tmin',mon=1:12, keepZip = F)
get_prism_monthlys(type = 'tmin',year=1895:2017,mon=1:12, keepZip = F)
get_prism_monthlys(type = 'tmax',year=1895:2017,mon=1:12, keepZip = F)
get_prism_monthlys(type = 'ppt',year=1895:2017,mon=1:12, keepZip = F)
RS <- prism_stack(ls_prism_data()) ##raster file of data
proj4string(RS)<-CRS("+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ##assign projection
siteD_spdf<-SpatialPointsDataFrame(coords=siteD[,c('longitude','latitude')],
data=siteD, proj4string = CRS("+proj=longlat +ellps=WGS84 +no_defs"))
test<-extract(RS, siteD_spdf,  fun=mean, na.rm=TRUE, sp=TRUE)
head(test)
dim(test)
is.data.frame(test)
is.matrix(test)
is.vector(test)
is.list(test)
is.numeric(test)
str(test)
rm(list=ls())
library(forecast)
library(stlplus)
library(fpp)
dat = read.csv('C:/Repos/forecasting-dynamics-course/data/tuscon_prism_monthly.csv', stringsAsFactors = FALSE)
head(dat)
tail(dat)
ppt.ts = ts(dat$pppt..mm., start = c(1895, 1), end = c(2018, 7), frequency = 12)
ppt.ts = ts(dat$ppt..mm., start = c(1895, 1), end = c(2018, 7), frequency = 12)
plot(ppt.ts, xlab = "Year", ylab="Precip.")
str(ppt.ts)
MA = ma(ppt.ts, order=13, centre = TRUE)
plot(ppt.ts)
lines(MA, col="blue", lwd = 3)
MA = ma(ppt.ts, order=36, centre = TRUE)
plot(ppt.ts)
lines(MA, col="blue", lwd = 3)
fit_add = decompose(ppt.ts, type = 'additive')
plot(fit_add)
fit_mult = decompose(ppt.ts, type = 'multiplicative')
plot(fit_mult)
str(fit_mult)
fit_add$seasonal
fit_add$seasonal[1,]
str(fit_mult)
fit_add$seasonal[1:12]
fit_add$seasonal[13:24]
plot(fit_add$seasonal[1:12])
plot(fit_mult$seasonal[1:12])
plot(fit_add)
plot(fit_mult)
?decomp
?decompose
library(stlplus)
season_window = 7
min_twindow = as.integer(1.5*12/(1-1.5*season_window^-1))
s_7 = stlplus(ppt.ts, s.window = season_window, t.window = min_twindow)
plot_seasonal(s_7)
season_window = 13
season_window = 13
min_twindow = (1.5*12)/(1-1.5*season_window^-1)
s_13 = stlplus(ppt.ts, s.window = season_window, t.window = 21)
plot_seasonal(s_13)
season_window = 25
min_twindow = (1.5*12)/(1-1.5*season_window^-1)
s_25 = stlplus(ppt.ts, s.window = season_window, t.window = 21)
plot_seasonal(s_25)
plot(s_25)
plot_trend(s_25)
season_window = 25
s_25 = stlplus(ppt.ts, s.window = season_window, t.window = 120)
plot_seasonal(s_25)
plot(s_25)
plot_trend(s_25)
season_window = 25
s_25 = stlplus(ppt.ts, s.window = season_window, t.window = 31)
plot_seasonal(s_25)
plot(s_25)
plot_trend(s_25)
season_window = 13
s_25 = stlplus(ppt.ts, s.window = season_window, t.window = 31)
plot_seasonal(s_25)
season_window = 25
s_25 = stlplus(ppt.ts, s.window = season_window, t.window = 21)
plot_seasonal(s_25)
plot(s_25)
plot_trend(s_25)
str(s_25)
plot(s_25$seasonal[1:12])
s_25$seasonal
s_25$ seasonal
names(s_25)
s_25$data$seasonal
s_25$data$seasonal[1:12]
plot(s_25$data$seasonal[1:12])
str(ppt.ts)
dim(ppt.ts)
ppt.ts
cycle(ppt.ts)
plot(fit_add$seasonal[1:12])
monthly_means <- tapply(ppt.ts, cycle(ppt.ts), FUN=mean)
plot(monthly_means)
autoplot(fit_add$seasonal[1:12])
qplot(fit_add$seasonal[1:12])
plot(fit_add$seasonal[1:12],type="o")
monthly_means <- tapply(ppt.ts, cycle(ppt.ts), FUN=mean)
plot(monthly_means,type="o")
library(forecast)
library(stlplus)
library(fpp)
setwd("C:/Repos/forecasting-dynamics-course/lectures")
## Inherent scales within a time series
#  Talk about scales within the data
#  often our data has some frequency of collection within a year
#  interested in either focusing on that scale, or removing the effects of other scales
#  For example - seasonally adjusted housing sales or unemployment
## What is time series decomposition
# A time series approach for trying to pull out the signals at different scales.
# Breaks down a time series into the trend, seasonal, and "irregular" fluctuations
# Use example of atmospheric CO2
# To extract these components, there are generally 3 basic steps.
# 1) we fit something to the observed data to extract the trend.
# 2) we fit a seasona model to the remaining data to pull out the season
# 3) whatever is left over are the irregular fluctuations (residuals)
## Time Series Objects
# To do a time series decomp using existing packages, we need our data to be a time series object.
# This is a data format, like a dataframe is a format, that has a special structure and R
# knows to work with it in a special way.
# Some packages will require you to put your data into a time series object specific to that
# package. For today, we will use the standard ts object in the base package. It's limitation is
# is that it can only take regularly spaced data (i.e. monthly, daily, quarterly, annual). There are
# other methods that can take irregular data and import that into a time series object. Packazges
# that can handle irregular data include zoo and xts.
## Decomposing a time series
# Working with data as a ts object.
# example: ts
# Exploring  patterns with decomposition using NDVI
# need to make sure yur data is already in chronological order
NDVI = read.csv('./../data/portal_timeseries.csv', stringsAsFactors = FALSE)
head(NDVI)
NDVI.ts = ts(NDVI$NDVI, start = c(1992, 3), end = c(2014, 11), frequency = 12)
plot(NDVI.ts, xlab = "Year", ylab="greenness")
class(NDVI.ts)
NDVI.ts
start(NDVI.ts)
end(NDVI.ts)
# You cannot slice and dice a ts object without losing the date info, unless you
# use a special tool
str(NDVI.ts)
data.2000 = window(NDVI.ts, start=c(1999,1),end=c(2000,12))
data.2000
# Extracting a trend
# a moving average is a classic way of extracting the 'cross year'
# pattern in the data
# We lose data on the front and back because as the name implies it is
# averaging over a window of values. Order is the size of the window.
MA_m13 = ma(NDVI.ts, order=13, centre = TRUE)
plot(NDVI.ts)
lines(MA_m13, col="blue", lwd = 3)
# # even length window
# MA_m12 = ma(NDVI.ts, order=12, centre = FALSE)
# MA_2x12 = ma(MA_m12, order=2,centre=FALSE)
# plot(NDVI.ts)
# lines(MA_2x12, col="green", lwd = 3)
# Classic Decomposition uses a Moving Average to obtain a trend, then detrend the observed data.
# two basic ways to remove a seasonal signal - additive or multiplicative.
# Additive: Observed = Trend + Seasonal + Irregular (fluctuations in the time series stable with trend)
# Multiplicative: Observed = Trend*Seasonal*Irregular (fluctuations in the time series increase with trend)
# In our data, not much of a trend, no clear relationship between trend and seasonality
Seasonal_residual_add = NDVI.ts - MA_m13
plot(Seasonal_residual_add)
Seasonal_residual_multi = NDVI.ts/MA_m13
plot(Seasonal_residual_multi)
# So, we've pulled out the trend. What does this plot represent? What's still left in here?
# Seasonal signal and the "random" signal. The next step is to disentangle those two signals.
# We walked through pullig out the trend signal because I wanted you to have a basic understanding
# of what's going on with decomposition approaches. But we don't have to disentangle all
# these signals by hand. There are packages that do this.
# So let's take our NDVI data and run it through one of these standard
# decomposition packages.
fit_add = decompose(NDVI.ts, type = 'additive')
plot(fit_add)
str(fit_add)
fit_mult = decompose(NDVI.ts, type = 'multiplicative')
plot(fit_mult)
str(fit_mult)
plot(fit_add$seasonal[1:12],type="o")
monthly_means <- tapply(NDVI.ts, cycle(NDVI.ts), FUN=mean)
plot(monthly_means,type="o")
library(zoo)
monthly_means <- aggregate(NDVI.ts, as.yearmon, mean)
plot(monthly_means,type="o")
?aggregate
?aggregate.zoo
?tapply
rm(list=ls())
library(forecast)
library(stlplus)
library(fpp)
dat = read.csv('C:/Repos/forecasting-dynamics-course/data/tuscon_prism_monthly.csv', stringsAsFactors = FALSE)
head(dat)
ppt.ts = ts(dat$tmin..degrees.C., start = c(1895, 1), end = c(2018, 7), frequency = 12)
plot(ppt.ts, xlab = "Year", ylab="Precip.")
fit_add = decompose(ppt.ts, type = 'additive')
plot(fit_add)
str(fit_add)
fit_mult = decompose(ppt.ts, type = 'multiplicative')
plot(fit_mult)
plot(fit_add$seasonal[1:12],type="o")
monthly_means <- tapply(ppt.ts, cycle(ppt.ts), FUN=mean)
plot(monthly_means,type="o")
ppt.ts = ts(dat$tmax..degrees.C., start = c(1895, 1), end = c(2018, 7), frequency = 12)
plot(ppt.ts, xlab = "Year", ylab="Precip.")
fit_add = decompose(ppt.ts, type = 'additive')
plot(fit_add)
str(fit_add)
fit_mult = decompose(ppt.ts, type = 'multiplicative')
plot(fit_mult)
str(fit_mult)
rm(list=ls())
library(forecast)
library(stlplus)
library(fpp)
dat = read.csv('C:/Repos/forecasting-dynamics-course/data/tuscon_prism_monthly.csv', stringsAsFactors = FALSE)
head(dat)
rm(list=ls())
library(forecast)
library(stlplus)
library(fpp)
dat = read.csv('C:/Repos/forecasting-dynamics-course/data/tuscon_prism_monthly.csv', stringsAsFactors = FALSE)
head(dat)
my_ts = ts(dat$tmin_C., start = c(1895, 1), end = c(2018, 7), frequency = 12)
plot(my_ts, xlab = "Year", ylab="Tmin")
# decompose
fit_add = decompose(my_ts, type = 'additive')
plot(fit_add)
str(fit_add)
fit_mult = decompose(my_ts, type = 'multiplicative')
plot(fit_mult)
str(fit_mult)
source('C:/Users/adler/Box Sync/teaching/Forecasting/private_code/decomp_autocorr.R')
source('C:/Users/adler/Box Sync/teaching/Forecasting/private_code/decomp_autocorr.R')
acf(my_ts)
pacf(my_ts)
tsdisplay(my_ts)
par(mfrow=c(1,1))
tsdisplay(my_ts)
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course")
library(forecast)
library(ggplot2)
# Data setup
data = read.csv("./data/portal_timeseries.csv", stringsAsFactors = FALSE)
head(data)
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course")
library(forecast)
library(ggplot2)
# Data setup
data = read.csv("./data/portal_timeseries.csv", stringsAsFactors = FALSE)
head(data)
NDVI_ts = ts(data$NDVI, start = c(1992, 3), end = c(2014, 11), frequency = 12)
rain_ts = ts(data$rain, start = c(1992, 3), end = c(2014, 11), frequency = 12)
rats_ts = ts(data$rodents, start = c(1992, 3), end = c(2014, 11), frequency = 12)
plot(rats_ts)
acf(rats_ts)
pacf(rats)
pacf(rats_ts)
plot(rats_ts)
plot(NDVI_ts,rats_ts)
plot(rain_ts,rats_ts)
plot(rain_ts)
plot(NDVI_ts)
arima_model = auto.arima(rats_ts, seasonal = FALSE)
plot(rats_ts)
lines(fitted(arima_model), col='red')
acf(resid(arima_model))
Box.test(resid(arima_model))
arima_model
seasonal_arima_model = auto.arima(NDVI_ts)
seasonal_arima_model
seasonal_arima_model = auto.arima(rats_ts)
seasonal_arima_model
rain_arima_model = auto.arima(rats_ts, xreg = rain_ts)
rain_arima_model
?auto.arima
rain_arima_model = auto.arima(rats_ts, xreg = NDVI_ts)
rain_arima_model
plot(rats_ts)
lines(fitted(rain_arima_model), col = 'blue')
lines(fitted(arima_model), col = 'red')
arima_model
summary(arima_model)
?Arima
plot(diff(rats_ts))
acf(diff(rats_ts))
arima_model = auto.arima(rats_ts, seasonal = FALSE)
arima_model
plot(rats_ts)
lines(fitted(arima_model), col='red')
plot(fitted(arima_model),rats_ts)
fitted(arima_model)[1:10]
rats_ts[1:10]
acf(rats_ts)
pacf(rats_ts)
arima_model = Arima(rats_ts, c(2, 0, 0))
arima_model
plot(rats_ts)
lines(fitted(arima_model), col = 'red')
Box.test(residuals(arima_model))
plot(residuals(arima_model))
y=diff(rats_ts)
x=diff(rain_ts)
plot(x,y)
y=diff(rats_ts)
x=diff(rain_ts)
test = auto.arima(y,xreg=x)
test(plot(y))
lines(fitted(test), col = 'red')
decomp_rats = decompose(rats_ts)
plot(decomp_rats)
decomp_rats = decompose(log(rats_ts))
plot(decomp_rats)
plot(decomp_rats)
decomp_rats = decompose(rats_ts)
plot(decomp_rats)
tapply(rats_ts,cycle(rats_ts),mean)
plot(tapply(rats_ts,cycle(rats_ts),mean))
acf(rats_ts)
pacf(rats_ts)
rats_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>%
group_by(year)
rats_May
head(data)
rats_May <- rats_May[,c("year","month","rodents")]
rats_May
plot(rats_May$rodents)
acf(rats_May$rodents)
covars_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month %in% c(1:4)) %>%
group_by(year) %>%
summarize(cum_NDVI = sum(NDVI), cum_rain = sum(rain))
covars_May
rats_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>%
group_by(year) %>% select(c("year","month","rodents"))
rats_May <- data %>% select(c("year","month","rodents")) %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>%group_by(year)
rats_May <- as.tibble(data) %>% select(c("year","month","rodents")) %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>%group_by(year)
rats_May <- as_tibble(data) %>% select(c("year","month","rodents")) %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>%group_by(year)
rats_May <- tibble(data) %>% select(c("year","month","rodents")) %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>%group_by(year)
rats_May <- data %>% separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
rats_May <- rats_May[,c("year","month","rodents")]
# get yearly rodents counts in May (average peak)
rats_May <- data %>% separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
rats_May <- rats_May[,c("year","month","rodents")]
# get Jan - April mean NDVI
covars_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month %in% c(1:4)) %>%
group_by(year) %>%
summarize(cum_NDVI = sum(NDVI), cum_rain = sum(rain))
rats_annual <- full_join(rats_May,covars_May,by="year")
rats_annual
pairs(rats_annual[,3:5])
NDVI_ts = ts(rats_annual$NDVI, start = c(1992), end = c(2014), frequency = 1)
NDVI_ts = ts(rats_annual$rats_May, start = c(1992), end = c(2014), frequency = 1)
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course")
library(forecast)
library(ggplot2)
# Data setup
data = read.csv("./data/portal_timeseries.csv", stringsAsFactors = FALSE)
head(data)
# get yearly rodents counts in May (average peak)
rats_May <- data %>% separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
rats_May <- rats_May[,c("year","month","rodents")]
# get Jan - April mean NDVI
covars_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month %in% c(1:4)) %>%
group_by(year) %>%
summarize(cum_NDVI = sum(NDVI), cum_rain = sum(rain))
# merge
rats_annual <- full_join(rats_May,covars_May,by="year")
head(rats_annual)
NDVI_ts = ts(rats_annual$cum_NDVI, start = c(1992), end = c(2014), frequency = 1)
rain_ts = ts(rats_annual$cum_rain, start = c(1992), end = c(2014), frequency = 1)
rats_ts = ts(rats_annual$rodents, start = c(1992), end = c(2014), frequency = 1)
plot(rats_ts)
plot(rain_ts)
plot(NDVI_ts)
autoplot(rats_ts)
autoplot(rats_ts)+geom_line(rain_ts)+geom_line(NDVI_ts)
autoplot(rats_ts)+geom_line(aes=rain_ts)+geom_line(aes=NDVI_ts)
autoplot(rats_ts)+geom_line(aes(rain_ts))+geom_line(aes(NDVI_ts))
plot(rain_ts,rats_ts)
plot(rain_ts,rats_ts,type="p")
acf(rats_ts)
pacf(rats_ts)
decomp_rats = decompose(rats_ts)
arima_model = Arima(rats_ts, c(2, 0, 0))
arima_model
plot(rats_ts)
lines(fitted(arima_model), col = 'red')
Box.test(residuals(arima_model))
m_rain = Arima(rats_ts, c(2, 0, 0),xreg=rain_ts)
m_rain
plot(m_rain)
plot(rats_ts)
lines(fitted(m_rain), col = 'red')
lines(fitted(m_null), col = 'red')
Box.test(residuals(m_null))
m_null = Arima(rats_ts, c(2, 0, 0))
m_null
plot(rats_ts)
lines(fitted(m_null), col = 'red')
m_rain = Arima(rats_ts, c(2, 0, 0),xreg=rain_ts)
m_rain
plot(rats_ts)
lines(fitted(m_rain), col = 'red')
m_rain = Arima(rats_ts, c(2, 0, 0),xreg=NDVI_ts)
m_rain
m_ndvi = Arima(rats_ts, c(2, 0, 0),xreg=NDVI_ts)
m_ndvi
plot(rats_ts)
lines(fitted(m_ndvi), col = 'red')
m_ndvi = Arima(rats_ts, c(2, 0, 0),xreg=c(NDVI_ts,rain_ts))
m_ndvi = Arima(rats_ts, c(2, 0, 0),xreg=c("NDVI_ts","rain_ts"))
?Arima
m_ndvi = Arima(rats_ts, c(2, 0, 0),xreg=cbind(NDVI_ts,rain_ts))
m_ndvi
plot(rats_ts)
lines(fitted(m_ndvi), col = 'red')
plot.ts
?plot.ts
plot(rats_ts,pch=16)
plot(rats_ts,pch=".")
plot(rats_ts)
plot(rats_ts,type="b")
plot(rats_ts,type="o")
plot(rats_ts,type="o",pch=16)
lines(fitted(m_ndvi), col = 'red')
as_tibble(data)
select(as_tibble(data),year,month,rodents)
select(as_tibble(data),year)
rats_May <- data  %>% separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
rats_May <- rats_May[,c("year","month","rodents")]
rats_May <- data  %>% as_data_frame %>% select(year,month,rodents) %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
is.data.frame(data)
library(dplyr)
rats_May <- data %>% as_data_frame %>% select(year,month,rodents) %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
rats_May <- data %>% as_tibble %>% select(year,month,rodents) %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
s
data %>% tibble::as_tibble %>% select(year,month,rodents)
tibble::as_tibble(data) %>% select(year,month,rodents)
rats_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
rats_May <- rats_May[,c("year","month","rodents")]
head(rats_May)
rats_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
rats_May <- rats_May[,c("year","month","rodents")]
rats_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>% group_by(year)
head(rats_May)
