N
# simulate an AR1 process
tot_time <- 20
a = 6
b = 0.9
sigma = 1
initial_n <- 0.1
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 6
b = 0.9
sigma = 1
initial_n <- 0.1
# simulate an AR1 process
tot_time <- 100
a = 6
b = 0.9
sigma = 1
initial_n <- 0.1
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
source('C:/Repos/forecasting-dynamics-course/lectures/AR1vsGompertz.R')
plot(N,type="l")
source('C:/Repos/forecasting-dynamics-course/lectures/AR1vsGompertz.R')
# simulate an AR1 process
tot_time <- 100
a = 1
b = 0.5
sigma = 0
initial_n <- 0.1
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
plot(exp(N),type="l")
# simulate an AR1 process
tot_time <- 100
a = 1
b = 0.5
sigma = 0
initial_n <- 0.001
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
plot(exp(N),type="l")
# simulate an AR1 process
tot_time <- 100
a = 1
b = 0.5
sigma = 0
initial_n <- 0.001
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 1
b = 1
sigma = 0
initial_n <- 0.001
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 1
b = 1
sigma = 2
initial_n <- 0.001
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 0
b = 1
sigma = 2
initial_n <- 0.001
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 0
b = 1
sigma = 2
initial_n <- 0.001
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 0
b = 1
sigma = 2
initial_n <- 0.001
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 0
b = 1
sigma = 2
initial_n <- 0.001
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
lograts_ts = log(rats_ts)
plot(rats_ts,lograts_ts)
identical(rats_ts,exp(lograts_ts))
rats_ts[1:5]
lograts_ts[1:5]
log(384.7876)
# simulate an AR1 process
tot_time <- 100
a = 1
b = 1
sigma = 2
initial_n <- 1
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 1
b = 1
sigma = 0
initial_n <- 1
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# simulate an AR1 process
tot_time <- 100
a = 2
b = 1
sigma = 0
initial_n <- 1
ar1 <- function(n,a,b,sigma){
new_n <- a + b*n +rnorm(1,0,sigma)
}
N <- numeric(tot_time)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = ar1(N[i-1],a=a,b=b,sigma=sigma)
}
plot(N,type="l")
# An AR1 function to simulate popn growth
ar1 <- function(time_steps,initial_n,a,b,sigma){
N <- numeric(time_steps)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = a + b*N[i-1] +rnorm(1,0,sigma)
}
return(N)
}
# Run it with no stochasticity, no density dependence
N <- ar1(time_steps=100, initial_n=1, a=2, b=1, sigma=0)
plot(N,type="l",xlab="Time")
N <- ar1(time_steps=100, initial_n=1, a=2, b=1, sigma=1)
plot(N,type="l",xlab="Time")
N <- ar1(time_steps=100, initial_n=1, a=2, b=1, sigma=2)
plot(N,type="l",xlab="Time")
N <- ar1(time_steps=100, initial_n=1, a=2, b=0.5, sigma=2)
plot(N,type="l",xlab="Time")
abline(h=2/0.5,col="red")
N <- ar1(time_steps=100, initial_n=1, a=5, b=0.5, sigma=0)
plot(N,type="l",xlab="Time")
abline(h=5/0.5,col="red")
N <- ar1(time_steps=100, initial_n=1, a=2, b=0.5, sigma=1)
plot(exp(N),type="l",xlab="Time")
# An AR1 function to simulate popn growth
ar1 <- function(time_steps,initial_n,a,b,sigma){
N <- numeric(time_steps)
N[1] = initial_n
for(i in 2:tot_time){
N[i] = a + b*N[i-1] +rnorm(1,0,sigma)
}
return(N)
}
# Run it with no stochasticity, no density dependence
N <- ar1(time_steps=100, initial_n=1, a=2, b=1, sigma=0)
plot(N,type="l",xlab="Time")
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course")
library(forecast)
library(ggplot2)
library(dplyr)
library(tidyr)
# Data setup
data = read.csv("./data/portal_timeseries.csv", stringsAsFactors = FALSE)
head(data)
# get yearly rodents counts in May (average peak)
rats_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>%
group_by(year)  %>%
select(year,month,rodents)
# get Jan - April mean NDVI
covars_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month %in% c(1:4)) %>%
group_by(year) %>%
summarize(cum_NDVI = sum(NDVI), cum_rain = sum(rain))
# merge
rats_annual <- full_join(rats_May,covars_May,by="year")
# convert to time series
NDVI_ts = ts(rats_annual$cum_NDVI, start = c(1992), end = c(2014), frequency = 1)
rain_ts = ts(rats_annual$cum_rain, start = c(1992), end = c(2014), frequency = 1)
rats_ts = ts(rats_annual$rodents, start = c(1992), end = c(2014), frequency = 1)
# Explore data
plot(rats_ts)
plot(rain_ts)
plot(NDVI_ts)
plot(rain_ts,rats_ts)
acf(rats_ts)
pacf(rats_ts)
# can't decompose because no seasons
# ARIMA
m_null = Arima(rats_ts, c(2, 0, 0))
m_null
plot(rats_ts)
lines(fitted(m_null), col = 'red')
Box.test(residuals(m_null))
# ARIMA
m_null = Arima(rats_ts, c(1, 0, 0))
m_null
plot(rats_ts)
lines(fitted(m_null), col = 'red')
Box.test(residuals(m_null))
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course")
library(forecast)
library(ggplot2)
library(dplyr)
library(tidyr)
# Data setup
data = read.csv("./data/portal_timeseries.csv", stringsAsFactors = FALSE)
head(data)
# get yearly rodents counts in May (average peak)
rats_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month == 5) %>%
group_by(year)  %>%
select(year,month,rodents)
# get Jan - April mean NDVI
covars_May <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month %in% c(1:4)) %>%
group_by(year) %>%
summarize(cum_NDVI = sum(NDVI), cum_rain = sum(rain))
# merge
rats_annual <- full_join(rats_May,covars_May,by="year")
# convert to time series
NDVI_ts = ts(rats_annual$cum_NDVI, start = c(1992), end = c(2014), frequency = 1)
rain_ts = ts(rats_annual$cum_rain, start = c(1992), end = c(2014), frequency = 1)
rats_ts = ts(rats_annual$rodents, start = c(1992), end = c(2014), frequency = 1)
# Explore data
plot(rats_ts)
plot(rain_ts)
plot(NDVI_ts)
plot(rain_ts,rats_ts)
acf(rats_ts)
pacf(rats_ts)
# can't decompose because no seasons
# ARIMA
m_null = Arima(rats_ts, c(1, 0, 0))
m_null
plot(rats_ts)
lines(fitted(m_null), col = 'red')
Box.test(residuals(m_null))
# add rain
m_rain = Arima(rats_ts, c(2, 0, 0),xreg=rain_ts)
m_rain
plot(rats_ts)
lines(fitted(m_rain), col = 'red')
# add ndvi
m_ndvi = Arima(rats_ts, c(2, 0, 0),xreg=NDVI_ts)
m_ndvi
plot(rats_ts)
lines(fitted(m_ndvi), col = 'red')
# add ndvi and rain
m_ndvi = Arima(rats_ts, c(2, 0, 0),xreg=cbind(NDVI_ts,rain_ts))
m_ndvi
plot(rats_ts,type="o",pch=16)
lines(fitted(m_ndvi), col = 'red')
plot(forecast(m_null,h=3))
m_null = Arima(rats_ts, c(2, 0, 0))
m_null
plot(rats_ts)
lines(fitted(m_null), col = 'red')
Box.test(residuals(m_null))
plot(forecast(m_null,h=3))
plot(forecast(m_rain,h=3))
plot(forecast(m_rain,newdata=c(500,500,500),h=3))
plot(forecast(m_rain,rain_ts=c(500,500,500),h=3))
plot(forecast(m_rain,rain=c(500,500,500),h=3))
?forecast
plot(forecast(m_rain,xreg =c(500,500,500),h=3))
plot(forecast(m_rain,xreg =c(1000,1000,1000),h=3))
plot(forecast(m_rain,xreg =c(100,100,100),h=3))
mean(rain_ts)
plot(forecast(m_rain,xreg =c(10,10,10),h=3))
plot(forecast(m_rain,xreg =c(0,0,0),h=3))
plot(forecast(m_rain,xreg =c(100,100,100),h=3))
mean(NDVI_ts)
plot(forecast(m_ndvi,xreg =c(0,0,0),h=3))
m_ndvi = Arima(rats_ts, c(2, 0, 0),xreg=NDVI_ts)
plot(forecast(m_ndvi,xreg =c(0,0,0),h=3))
plot(forecast(m_ndvi,xreg =c(1,1,1),h=3))
sd(rnorm(30,0,1))
sd(rnorm(30,0,1))
sd(rnorm(30,0,1))
sd(rnorm(30,0,1))
sd(rnorm(30,0,1))
sd(rnorm(30,0,1))
sd(rnorm(30,0,1))
sd(rnorm(30,0,1))
sd(rnorm(1000),0,1))
sd(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
sd(rnorm(1000,0,1))
read.csv("https://github.com/pbadler/forecasting-dynamics-course/blob/master/data/sanjoaquin_prism_monthly.csv")
test<-read.csv("https://github.com/pbadler/forecasting-dynamics-course/blob/master/data/sanjoaquin_prism_monthly.csv")
head(test)
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course")
library(forecast)
library(ggplot2)
library(dplyr)
library(tidyr)
# Data setup
climD = read.csv("./data/sanjoaquin_prism_monthly.csv", stringsAsFactors = FALSE)
head(data)
head(climD)
separate(climD$Date,c("year","month"),sep='-')
test = climD %>% separate(Date,c("year","month"),sep='-')
test
climD = climD %>% separate(Date,c("cal_year","month"),sep='-')
head(climD)
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course")
library(forecast)
library(ggplot2)
library(dplyr)
library(tidyr)
# Data setup
climD = read.csv("./data/sanjoaquin_prism_monthly.csv", stringsAsFactors = FALSE)
head(climD)
# add climate year
climD = climD %>% separate(Date,c("cal_year","month"),sep='-')
head(climD)
climD$month = as.numeric(climD$month)
head(climD)
climD$water_year = ifelse(climD$month > 8, cal_year + 1, cal_year)
climD$water_year = ifelse(climD$month > 8, climD$cal_year + 1, climD$cal_year)
climD$cal_year = as.numeric(climD$cal_year)
climD$water_year = ifelse(climD$month > 8, climD$cal_year + 1, climD$cal_year)
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course")
library(forecast)
library(ggplot2)
library(dplyr)
library(tidyr)
# Data setup
climD = read.csv("./data/sanjoaquin_prism_monthly.csv", stringsAsFactors = FALSE)
head(climD)
# add climate year
climD = climD %>% separate(Date,c("cal_year","month"),sep='-')
climD$cal_year = as.numeric(climD$cal_year)
climD$month = as.numeric(climD$month)
climD$water_year = ifelse(climD$month > 8, climD$cal_year + 1, climD$cal_year)
head(climD)
View(climD)
# get fall through spring rainfall
climD_annual = climD %>%filter(month %in% c(1:4,9:12)) %>%
group_by(water_year) %>%
summarize(rain = sum(ppt_mm))
climD_annual
plot(climD_annual)
plot(climD_annual,type="l")
forageD = read.csv("./data/sanjoaquin_forage.csv", stringsAsFactors = FALSE)
forageD = read.csv("./data/sanjoaquin_forage_train_set.csv", stringsAsFactors = FALSE)
head(forageD)
?full_join
forageD = full_join(forageD, climD_annual, by = c("year" = "water_year"))
head(forageD)
plot(forageD$lbs_per_acre ~ forageD$rain)
forageD = read.csv("C/Users/adler/Box Sync/teaching/Forecasting/private_code/sanjoaquin_forage_train_set.csv", stringsAsFactors = FALSE)
forageD = read.csv("C:/Users/adler/Box Sync/teaching/Forecasting/private_code/sanjoaquin_forage_train_set.csv", stringsAsFactors = FALSE)
source('C:/Users/adler/Box Sync/teaching/Forecasting/private_code/sanjoaquin_precip_production.R')
47000/12
104/3916
104000/3916
104000/40/12
40000/12
104000/3333
104/30
104000/30
3467*12
r <- 0.7
k <- 70
Time <- c(1:100)
N <- rep("NA", 100)
N[1] <- 2
# check
N
LogisticGrowth <- function(N, r, k) {
NFinal = N + r*N*(1-N/k)
return(NFinal)
}
for(i in 2:length(Time)){
N[i] = LogisticGrowth(N=N[i-1], r=r, k=k)
}
r <- 0.7
k <- 70
Time <- c(1:100)
N <- rep(NA, 100)
N[1] <- 2
# check
N
LogisticGrowth <- function(N, r, k) {
NFinal = N + r*N*(1-N/k)
return(NFinal)
}
for(i in 2:length(Time)){
N[i] = LogisticGrowth(N=N[i-1], r=r, k=k)
}
N
